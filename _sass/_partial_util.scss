//******************************************************************************
// SCSS Utilities
// Christopher De Pasquale, 2018
//	- Helper functions
//  - 
// Usage:
// Add a span with a .tooltip class inside the object requiring a tooltip, then
// insert your tooltip text as the content of the span.
//      
//     <div class="object_with_tooltip"> 
//         ... content ...
//         <span class="tooltip">Tooltip text</span>
//     </div>
//
// Note: Tooltip doesn't need to be the last element, it can be anywhere.
//       However, it will only show when hovering on it's direct parent. 
// 
// TODO:
//	- Different directions, colors, shapes
//  - Can specify alignment of tooltip (middle, left, right)
//  - Alignment of tooltip changes arrow position
//  - Simplify with sass
//
//******************************************************************************

// Browser suffixes for increased support of older browsers
$browser-ids: ['-webkit-', '-moz-', '-ms-', '-o-', ''];

//	Cross-browser generator
@mixin _browsers-attrib($attrib, $val, $browserStrList: $browser-ids) {
	@each $id in $browserStrList {
		#{$id}#{$attrib}: $val;
	}
}

//******************************************************************************
//		Helper Functions
//******************************************************************************

@function random-sign($var) {
	@if (random(2) == 1) {
		@return $var;
	} @else {
		@return -1*$var;
	}
}

@function random-range($min, $max) {
	@return random($max - $min + 1) - 1 + $min;
}

//******************************************************************************
//		Mixins - Cross-browser attributes
//******************************************************************************

@mixin transform($transformFuncs) {
	@include _browsers-attrib('transform', $transformFuncs);
}

@mixin clip-path($path) {
	-webkit-clip-path: $path;
	clip-path: $path;
}

@mixin backface-visibility($value) {
	-webkit-backface-visibility: $value;
	backface-visibility: $value;
}

@mixin border-radius($radius) {
	@include _browsers-attrib('border-radius', $radius);
}

// 		Animation

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin _animation-attrib($attrib, $val) {
	@if ($attrib == null) {
		$attrib: '';
	} @else {
		$attrib: '-' + $attrib;
	}
    -webkit-animation#{$attrib}: $val;
    -moz-animation#{$attrib}:    $val;
    -ms-animation#{$attrib}:     $val;
    -o-animation#{$attrib}:      $val;
    animation#{$attrib}:         $val;
}

@mixin animation($animationStr) {
	@include _browsers-attrib('animation', $animationStr);
}

@mixin animation-name($name) { 
	@include _browsers-attrib('animation-name', $name); 
}

@mixin animation-duration($duration) {
	@include _browsers-attrib('animation-duration', $duration);
}

@mixin animation-direction($direction) {
	@include _browsers-attrib('animation-direction', $direction);
}

@mixin animation-fill-mode($fillMode) {
	@include _browsers-attrib('animation-fill-mode', $fillMode);
}

@mixin animation-timing-function($timingMode) {
	@include _browsers-attrib('animation-timing-function', $timingMode);
}

//******************************************************************************
// 		Mixins - Helpers
//******************************************************************************

// Creates a rectangular clipped strip, with full width
// Arguments must be integers from 0 to 100, indicating percentage. 0 is the top
@mixin clip-strip($topHeight, $bottomHeight) {
	@include clip-path(polygon(0% #{$topHeight+0%}, 100% #{$topHeight+0%}, 100% #{$bottomHeight+0%}, 0% #{$bottomHeight+0%}));
}

// Create a square clip, from top left co-ord and size
@mixin clip-square($left, $top, $width, $height) { 
	@include clip-path(polygon($left $top, $left+$width $top, $left+$width $top+$height, $left $top+$height));
}

// Expand element to fill parent (or screen, if used on html)
@mixin fullscreen($margin: 0px, $padding: 0px, $overflow: hidden) {
	width: 100%;
	height: 100%;
	margin: $margin;
	padding: $padding;
	overflow: $overflow;
}

// Default attribs to make a pseudo-element visible
@mixin pseudo-elem($content: '', $position: absolute, $display: block) {
	display: $display;
	position: $position;
	content: $content;
}

@mixin disable-smooth-anim($smoothingSteps: 1) {
	@include animation-timing-mode(steps($smoothingSteps, end));
}

// Set animation & duration without setting other animation options to defaults
@mixin animation-flexible($name, $duration, $direction:null) {
	@include animation-name($name);
	@include animation-duration($duration);
	@include animation-direction($direction);
}

//******************************************************************************
//		Classes
//******************************************************************************

// Disables text selection
.disable-text-select { 
	-webkit-touch-callout: none; // ios 
	-webkit-user-select: none; // Safari 
	-khtml-user-select: none; // Konqueror 
	-moz-user-select: none; // Firefox
	-ms-user-select: none; // IE/Edge
	user-select: none; // Chrome/Opera
}

// Util - make text more readable
.black-shadow { 
	text-shadow: 0px 0px 1px black, 0px 0px 1px black, 0px 0px 2px black; 
}

// Util - Chromatic aberration-styled text 
.color-shadow {
	text-shadow: 0 0 1px #ffffff99, 0 1.5px #ff090999, -1.5px 0 #00ff2099, 0 -1.5px #0d60c3, 1px 1px 1px #00000099, 0 0 1px #000, 0 0 2px #000, 0 0 3px #000, 0 0 4px #000;
	color: white;
}